let fileModal, modalDelete, btnAddFile, btnChangePhoto, btnSaveProfile, btnSaveFile, btnDeleteFile, selFileTypes, inputFile, progressBar, textStatus, filesAttachedTable, parameters, isPhotoFile = !1, deleteId = 0; function setDomObjects() { fileModal = $("#addFilesModal"), modalDelete = $("#deleteModal"), btnAddFile = $("#btnAddFile"), btnChangePhoto = $("#btnChangePhoto"), btnSaveProfile = $("#btnSaveProfile"), btnSaveFile = $("#btnSaveFile"), btnDeleteFile = $("#btnDelete"), selFileTypes = $("#fileType"), inputFile = $("#file"), progressBar = $(".progress-bar"), textStatus = $("#text-status") } function createFilesAttachedTable(e, t) { filesAttachedTable = new Tabulator("#files-attached-table", { data: e, height: "450px", layout: "fitColumns", movableColumns: !0, columns: t }) } $(document).ready(function () { parameters = getParameters(window.location.search), setDomObjects(), btnSaveProfile.click(function () { savePersonData(createPersonObject()) }), btnAddFile.bind("click", showAddFile), btnSaveFile.click(function () { saveFile() }), btnDeleteFile.click(function () { deleteFile() }), fileModal.on("show.bs.modal", function (e) { getFileTypes() }), fileModal.on("hide.bs.modal", function (e) { inputFile[0].value = "", isPhotoFile = !1, cleanModalMessage() }), null !== parameters ? getPerson() : (createFilesAttachedTable([], getColumns()), $("input[name=Email]").val(localStorage.getItem("userEmail")), hideLoading()) }); const addDownloadButton = e => `<button class="btn btn-success" onclick="downloadFile('${e._cell.value}')" title="Download"><i class="fas fa-cloud-download-alt"></i></button>`, addDeleteButton = e => `<button class="btn btn-danger" onclick="showDeletePopup('${e._cell.value}')" title="Delete"><i class="fas fa-trash-alt"></i></button>`; function filterFileTypesData(e) { const t = filesAttachedTable.options.data; let o = e; for (fileAttached of t) o = o.filter(e => e.FileType !== fileAttached.FileType); return o } function processSelectOptions(e) { return e.map(e => `<option value="${e.FileId}"> ${e.FileType} </option>`) } function fillSelectOptions(e) { selFileTypes.html(""), selFileTypes.append('<option value=""> Select... </option>'), selFileTypes.append(e) } function createPersonObject() { const e = {}, t = $("input[type=text]"); for (input of t) e[input.name] = input.value; return e.PersonId = $("input[name=PersonId]").val(), null !== localStorage.getItem("userId") && (e.UserId = localStorage.getItem("userId")), e } function enableFilesTab() { $("#profile-tab").removeClass("disabled") } function showAddFile(e) { "btnChangePhoto" === e.target.id ? ($(".fileType").hide(), isPhotoFile = !0) : $(".fileType").show(), fileModal.modal("show") } function showDeletePopup(e) { deleteId = e, modalDelete.modal("show") } function downloadFile(e) { window.open(e) } function enableChangePhotoButton() { btnChangePhoto.removeAttr("disabled"), btnChangePhoto.bind("click", showAddFile) } function setParameter(e) { document.location.search = `?id=${e}` } function setProgressBarValue(e) { const t = `${e}%`, o = 100 === e ? "Complete" : "Incomplete"; progressBar[0].style.width = t, progressBar.html(t), textStatus.html(o) } function setValues(e) { for (property in e) $(`input[name=${property}]`).val(e[property]); null !== e.Photo && $(".img-person").attr("src", e.Photo) } function setFileObject() { const e = !0 === isPhotoFile ? "Photo" : selFileTypes[0].value; var t = new FormData; return t.append("FileType", e), t.append("File", inputFile[0].files[0]), t.append("PersonId", $("input[name=PersonId]").val()), t } function getColumns() { return [{ title: "File Type", field: "FileType", width: 400 }, { title: "File", field: "Path", headerSort: !1, formatter: addDownloadButton, width: 80 }, { title: "", field: "FileAttachedId", headerSort: !1, formatter: addDeleteButton, width: 80 }] } function getColumnsReadOnly() { return [{ title: "File Type", field: "FileType", width: 400 }, { title: "File", field: "Path", headerSort: !1, formatter: addDownloadButton, width: 80 }] } function readonlyMode() { $("button").remove(), $("input[type=text]").attr("readonly", !0) } function getPerson() { const e = parameters.id; $.ajax({ method: "GET", url: `/Person/GetPerson/${e}`, success: function (e) { "PersonNotFound" !== e.Message ? (setValues(e), enableFilesTab(), enableChangePhotoButton(), getProfileStatus(), parameters.read ? (createFilesAttachedTable(e.FilesAttached, getColumnsReadOnly()), readonlyMode()) : createFilesAttachedTable(e.FilesAttached, getColumns()), hideLoading()) : showAlert("warning", "Person not found") }, error: function () { console.log("Error"), showAlert("danger", "An error has ocurred, please contact with the system administrator") } }) } function getFileTypes() { $.ajax({ method: "GET", url: "/File/GetFiles", success: function (e) { fillSelectOptions(processSelectOptions(filterFileTypesData(e))) }, error: function () { console.log("Error"), showAlert("danger", "An error has ocurred, please contact with the system administrator") } }) } function getProfileStatus() { const e = $("input[name=PersonId]").val(); $.ajax({ method: "GET", url: `/Person/GetProfileStatus/${e}`, success: function (e) { "PersonNotFound" !== e.Message ? setProgressBarValue(e.Message) : showAlert("warning", "Person not found") }, error: function () { console.log("Error"), showAlert("danger", "An error has ocurred, please contact with the system administrator") } }) } function savePersonData(e) { $.ajax({ method: "POST", url: "/Person/Person", data: e, success: function (e) { switch (e.Message) { case "Created": clearLocalStorage(), setParameter(e.PersonId), $("input[name=personId]").val(e.PersonId), showAlert("success", "The person has been successfully created"); break; case "Updated": showAlert("success", "The person has been successfully updated"); break; case "Error": let t = createErrorMessageValidation(e.Errors); showAlert("danger", t) } }, fail: function () { console.log("Error"), showAlert("danger", "An error has ocurred, please contact with the system administrator") } }) } function saveFile() { const e = setFileObject(); $.ajax({ method: "POST", url: "/FileAttached/FileAdd", data: e, processData: !1, contentType: !1, success: function (e) { if ("Error" === e.Message) { let t = createErrorMessageValidation(e.Errors); showAlert("danger-modal", t) } else isPhotoFile ? ($(".img-person").attr("src", e.Message), getProfileStatus()) : getPerson(), fileModal.modal("hide") }, fail: function () { console.log("Error"), showAlert("danger", "An error has ocurred, please contact with the system administrator") } }) } function deleteFile() { const e = $("input[name=PersonId]").val(); $.ajax({ method: "GET", url: `/FileAttached/DeleteFile?personId=${e}&fileId=${deleteId}`, success: function (e) { modalDelete.modal("hide"), getPerson(), showAlert("success", "The file has been successfully deleted") }, fail: function () { console.log("Error"), showAlert("danger", "An error has ocurred, please contact with the system administrator") } }) } function hideLoading() { $(".loading").hide() } function showLoading() { $(".loading").show() }